chapter 3 람다

	람다?
	어디에 어떻게 슴?
	실행 어라운드 패턴
	함수형 인터페이스, 형식추론
	메서드 참조
	람다 만들기
	
동작 파라미터 를 이용해서 변화하는 요구사항에 효과적으로 대응
	정의한 코드블록을 다른 메서드로 전달가능
	
	-> 유연하고 재사용가능한 코드를 만들 수 있다.
	
익명클래스로도 가능하지만, 만족할만큼 깔끔스럽진 않았음.
3장에서는 람다를 이용해서 좀더 깔끔한 코드를 짜보자.

일단 람다표현식은 , 익명클래스와 비슷하다고 생각해두자.



3.1 람다란 무엇인가?

람다 표현식은 메서드로 전달 할 수 있는 익명함수를 단순화한 것 이라고 할 수 있겠다.
람다표현식에는 이름은 없지만, 파라미터 리스트, 바디, 반환형식, 발생할수 있는 예외리스트를 가질 수 있다.

 
 	익명 : 
 		보통의 메서드와 달리 이름이 없으므로 익명이라 표현.
 		구현할 코드에 대한 걱정거리가 줄어듬.
 	함수 :
 		**람다는 메서드 처럼 특정클래스에 종속되지 않으므로 함수라고 부른다.
 		하지만 메서드 처럼 파라미터 리스트, 바디, 반환방식, 가능한 예외리스트를 포함한다.
 	전달 :
 		람다 표현식을 메서드 인수로 전달하거나, 변수로 저장할 수 있다.
 	간결성 :
 		익명클래스 처럼 많은 자질구레한 코드를 구현할 필요없다.
 		
 		
람다
	용어 : **람다 미적분학 학계에서 개발한 시스템에서 유래
	
	익명클래스와의 비교 : 코드를 전달하는 과정은 같으나, 익명클래스의 경우 자질구레한 코드를 작성해야됨.
	* 람다 자체가 자바8 이전 버전에서 할 수 없었던 일을 제공하는 것은 아니나, 동적 파라미터를 이용할때,
	익명 클래스 등 판에 박힌 형식의 코드를 구현할 필요가 없음.
	
	
ex1) 익명 클래스 예제
Comparator<Apple> byWeight = new Comparator<Apple>() {
	@Override
	public int compare(Apple a1, Apple a2) {
		return Integer.compare(a1.getWeight(), a2.getWeight());
	}
}; 

ex2) 람다

Comparator<Apple> byWeight = (Apple a1, Apple a2) -> Integer.compare(a1.getWeight(), a2.getWeight());

확실히 람다는 깔끔하다. 아직은 잘모르지만, 특징적으로 보믄 두개의 Apple객체를 비교할수 있는 코드를 전달 할 수 있다는점.


(Apple a1, Apple a2) 	-> 		Integer.compare(a1.getWeight(), a2.getWeight())
(람다 파라미터)          	화살표	람다 바디

파라미터 리스트 :
	



	
 		
